/*
 * Created on 2017-03-08 ( Date ISO 2017-03-08 - Time 14:27:11 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */

package org.demo.persistence.impl.jdbc;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.inject.Named;


import org.demo.data.record.TypesexeRecord ;
import org.demo.persistence.TypesexePersistence;
import org.demo.persistence.impl.jdbc.commons.GenericDAO;

/**
 * Typesexe persistence implementation 
 * 
 * @author Telosys
 *
 */
@Named("TypesexePersistence")
public class TypesexePersistenceJdbc extends GenericDAO<TypesexeRecord> implements TypesexePersistence {

	private final static String SQL_SELECT_ALL = 
		"select ID_SEXE, LABEL_SEXE from typesexe"; 

	private final static String SQL_SELECT = 
		"select ID_SEXE, LABEL_SEXE from typesexe where ID_SEXE = ?";

	private final static String SQL_INSERT = 
		"insert into typesexe ( ID_SEXE, LABEL_SEXE ) values ( ?, ? )";

	private final static String SQL_UPDATE = 
		"update typesexe set LABEL_SEXE = ? where ID_SEXE = ?";

	private final static String SQL_DELETE = 
		"delete from typesexe where ID_SEXE = ?";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from typesexe";

	private final static String SQL_COUNT = 
		"select count(*) from typesexe where ID_SEXE = ?";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public TypesexePersistenceJdbc() {
		super();
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForPrimaryKey(PreparedStatement ps, int i, TypesexeRecord typesexe) throws SQLException {
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, typesexe.getIdSexe() ) ; // "ID_SEXE" : java.lang.Integer
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForInsert(PreparedStatement ps, int i, TypesexeRecord typesexe) throws SQLException {
		//--- Set PRIMARY KEY and DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		setValue(ps, i++, typesexe.getIdSexe() ) ; // "ID_SEXE" : java.lang.Integer
		setValue(ps, i++, typesexe.getLabelSexe() ) ; // "LABEL_SEXE" : java.lang.String
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForUpdate(PreparedStatement ps, int i, TypesexeRecord typesexe) throws SQLException {
		//--- Set DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		setValue(ps, i++, typesexe.getLabelSexe() ) ; // "LABEL_SEXE" : java.lang.String
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, typesexe.getIdSexe() ) ; // "ID_SEXE" : java.lang.Integer
	}

	//----------------------------------------------------------------------
	/**
	 * Creates a new instance of the bean and populates it with the given primary value(s)
	 * @param idSexe;
	 * @return the new instance
	 */
	private TypesexeRecord newInstanceWithPrimaryKey( Integer idSexe ) {
		TypesexeRecord typesexe = new TypesexeRecord();
		typesexe.setIdSexe( idSexe );
		return typesexe ;
	}

	//----------------------------------------------------------------------
	@Override
	protected TypesexeRecord newInstance() {
		return new TypesexeRecord() ;
	}

    //----------------------------------------------------------------------
	@Override
	protected TypesexeRecord populateBean(ResultSet rs, TypesexeRecord typesexe) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		typesexe.setIdSexe(rs.getInt("ID_SEXE")); // java.lang.Integer
		if ( rs.wasNull() ) { typesexe.setIdSexe(null); }; // not primitive number => keep null value if any
		typesexe.setLabelSexe(rs.getString("LABEL_SEXE")); // java.lang.String
		return typesexe ;
	}

	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public TypesexeRecord findById( Integer idSexe ) {
		TypesexeRecord typesexe = newInstanceWithPrimaryKey( idSexe ) ;
		if ( super.doSelect(typesexe) ) {
			return typesexe ;
		}
		else {
			return null ; // Not found
		}
	}
	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public List<TypesexeRecord> findAll() {
		return super.doSelectAll();
	}

	//----------------------------------------------------------------------
	/**
	 * Loads the given bean, it is supposed to contains the primary key value(s) in its attribute(s)<br>
	 * If found, the given instance is populated with the values retrieved from the database<br>
	 * If not found, the given instance remains unchanged
	 * @param typesexe
	 * @return true if found, false if not found
	 */
	//@Override
	public boolean load( TypesexeRecord typesexe ) {
		return super.doSelect(typesexe) ;
	}

    //----------------------------------------------------------------------
	/**
	 * Inserts the given bean in the database 
	 * @param typesexe
	 */
	public long insert(TypesexeRecord typesexe) {
		super.doInsert(typesexe);
		return 0L ;
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public TypesexeRecord create(TypesexeRecord typesexe) {
		insert(typesexe);
		return typesexe ;
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public boolean update(TypesexeRecord typesexe) {
		int r = super.doUpdate(typesexe);
		return r > 0 ;

	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public TypesexeRecord save(TypesexeRecord typesexe) {
		if ( super.doExists(typesexe) ) {
			super.doUpdate(typesexe);
		}
		else {
			super.doInsert(typesexe);
		}
		return typesexe ;
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public boolean deleteById( Integer idSexe ) {
		TypesexeRecord typesexe = newInstanceWithPrimaryKey( idSexe ) ;
		int r = super.doDelete(typesexe);
		return r > 0 ;
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public boolean delete( TypesexeRecord typesexe ) {
		int r = super.doDelete(typesexe);
		return r > 0 ;
	}

    //----------------------------------------------------------------------
	/**
	 * Checks the existence of a record in the database using the given primary key value(s)
	 * @param idSexe;
	 * @return
	 */
	// @Override
	public boolean exists( Integer idSexe ) {
		TypesexeRecord typesexe = newInstanceWithPrimaryKey( idSexe ) ;
		return super.doExists(typesexe);
	}
    //----------------------------------------------------------------------
	/**
	 * Checks the existence of the given bean in the database 
	 * @param typesexe
	 * @return
	 */
	// @Override
	public boolean exists( TypesexeRecord typesexe ) {
		return super.doExists(typesexe);
	}

    //----------------------------------------------------------------------
	/**
	 * Counts all the records present in the database
	 * @return
	 */
	@Override
	public long countAll() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelectAll() {
		return SQL_SELECT_ALL;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}

}
