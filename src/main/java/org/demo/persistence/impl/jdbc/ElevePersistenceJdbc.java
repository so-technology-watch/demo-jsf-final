/*
 * Created on 2017-03-08 ( Date ISO 2017-03-08 - Time 14:27:11 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */

package org.demo.persistence.impl.jdbc;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.inject.Named;


import org.demo.data.record.EleveRecord ;
import org.demo.persistence.ElevePersistence;
import org.demo.persistence.impl.jdbc.commons.GenericDAO;

/**
 * Eleve persistence implementation 
 * 
 * @author Telosys
 *
 */
@Named("ElevePersistence")
public class ElevePersistenceJdbc extends GenericDAO<EleveRecord> implements ElevePersistence {

	private final static String SQL_SELECT_ALL = 
		"select ID_ELEVE, NOM, PRENOM, EMAIL, PASSWORD, CODE_POSTAL, SEXE, DATE_INSCRIPTION from eleve"; 

	private final static String SQL_SELECT = 
		"select ID_ELEVE, NOM, PRENOM, EMAIL, PASSWORD, CODE_POSTAL, SEXE, DATE_INSCRIPTION from eleve where ID_ELEVE = ?";

	private final static String SQL_INSERT = 
		"insert into eleve ( ID_ELEVE, NOM, PRENOM, EMAIL, PASSWORD, CODE_POSTAL, SEXE, DATE_INSCRIPTION ) values ( ?, ?, ?, ?, ?, ?, ?, ? )";

	private final static String SQL_UPDATE = 
		"update eleve set NOM = ?, PRENOM = ?, EMAIL = ?, PASSWORD = ?, CODE_POSTAL = ?, SEXE = ?, DATE_INSCRIPTION = ? where ID_ELEVE = ?";

	private final static String SQL_DELETE = 
		"delete from eleve where ID_ELEVE = ?";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from eleve";

	private final static String SQL_COUNT = 
		"select count(*) from eleve where ID_ELEVE = ?";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public ElevePersistenceJdbc() {
		super();
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForPrimaryKey(PreparedStatement ps, int i, EleveRecord eleve) throws SQLException {
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, eleve.getIdEleve() ) ; // "ID_ELEVE" : java.lang.Integer
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForInsert(PreparedStatement ps, int i, EleveRecord eleve) throws SQLException {
		//--- Set PRIMARY KEY and DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		setValue(ps, i++, eleve.getIdEleve() ) ; // "ID_ELEVE" : java.lang.Integer
		setValue(ps, i++, eleve.getNom() ) ; // "NOM" : java.lang.String
		setValue(ps, i++, eleve.getPrenom() ) ; // "PRENOM" : java.lang.String
		setValue(ps, i++, eleve.getEmail() ) ; // "EMAIL" : java.lang.String
		setValue(ps, i++, eleve.getPassword() ) ; // "PASSWORD" : java.lang.String
		setValue(ps, i++, eleve.getCodePostal() ) ; // "CODE_POSTAL" : java.lang.Integer
		setValue(ps, i++, eleve.getSexe() ) ; // "SEXE" : java.lang.Integer
		setValue(ps, i++, eleve.getDateInscription() ) ; // "DATE_INSCRIPTION" : java.util.Date
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForUpdate(PreparedStatement ps, int i, EleveRecord eleve) throws SQLException {
		//--- Set DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		setValue(ps, i++, eleve.getNom() ) ; // "NOM" : java.lang.String
		setValue(ps, i++, eleve.getPrenom() ) ; // "PRENOM" : java.lang.String
		setValue(ps, i++, eleve.getEmail() ) ; // "EMAIL" : java.lang.String
		setValue(ps, i++, eleve.getPassword() ) ; // "PASSWORD" : java.lang.String
		setValue(ps, i++, eleve.getCodePostal() ) ; // "CODE_POSTAL" : java.lang.Integer
		setValue(ps, i++, eleve.getSexe() ) ; // "SEXE" : java.lang.Integer
		setValue(ps, i++, eleve.getDateInscription() ) ; // "DATE_INSCRIPTION" : java.util.Date
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, eleve.getIdEleve() ) ; // "ID_ELEVE" : java.lang.Integer
	}

	//----------------------------------------------------------------------
	/**
	 * Creates a new instance of the bean and populates it with the given primary value(s)
	 * @param idEleve;
	 * @return the new instance
	 */
	private EleveRecord newInstanceWithPrimaryKey( Integer idEleve ) {
		EleveRecord eleve = new EleveRecord();
		eleve.setIdEleve( idEleve );
		return eleve ;
	}

	//----------------------------------------------------------------------
	@Override
	protected EleveRecord newInstance() {
		return new EleveRecord() ;
	}

    //----------------------------------------------------------------------
	@Override
	protected EleveRecord populateBean(ResultSet rs, EleveRecord eleve) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		eleve.setIdEleve(rs.getInt("ID_ELEVE")); // java.lang.Integer
		if ( rs.wasNull() ) { eleve.setIdEleve(null); }; // not primitive number => keep null value if any
		eleve.setNom(rs.getString("NOM")); // java.lang.String
		eleve.setPrenom(rs.getString("PRENOM")); // java.lang.String
		eleve.setEmail(rs.getString("EMAIL")); // java.lang.String
		eleve.setPassword(rs.getString("PASSWORD")); // java.lang.String
		eleve.setCodePostal(rs.getInt("CODE_POSTAL")); // java.lang.Integer
		if ( rs.wasNull() ) { eleve.setCodePostal(null); }; // not primitive number => keep null value if any
		eleve.setSexe(rs.getInt("SEXE")); // java.lang.Integer
		if ( rs.wasNull() ) { eleve.setSexe(null); }; // not primitive number => keep null value if any
		eleve.setDateInscription(rs.getDate("DATE_INSCRIPTION")); // java.util.Date
		return eleve ;
	}

	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public EleveRecord findById( Integer idEleve ) {
		EleveRecord eleve = newInstanceWithPrimaryKey( idEleve ) ;
		if ( super.doSelect(eleve) ) {
			return eleve ;
		}
		else {
			return null ; // Not found
		}
	}
	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public List<EleveRecord> findAll() {
		return super.doSelectAll();
	}

	//----------------------------------------------------------------------
	/**
	 * Loads the given bean, it is supposed to contains the primary key value(s) in its attribute(s)<br>
	 * If found, the given instance is populated with the values retrieved from the database<br>
	 * If not found, the given instance remains unchanged
	 * @param eleve
	 * @return true if found, false if not found
	 */
	//@Override
	public boolean load( EleveRecord eleve ) {
		return super.doSelect(eleve) ;
	}

    //----------------------------------------------------------------------
	/**
	 * Inserts the given bean in the database 
	 * @param eleve
	 */
	public long insert(EleveRecord eleve) {
		super.doInsert(eleve);
		return 0L ;
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public EleveRecord create(EleveRecord eleve) {
		insert(eleve);
		return eleve ;
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public boolean update(EleveRecord eleve) {
		int r = super.doUpdate(eleve);
		return r > 0 ;

	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public EleveRecord save(EleveRecord eleve) {
		if ( super.doExists(eleve) ) {
			super.doUpdate(eleve);
		}
		else {
			super.doInsert(eleve);
		}
		return eleve ;
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public boolean deleteById( Integer idEleve ) {
		EleveRecord eleve = newInstanceWithPrimaryKey( idEleve ) ;
		int r = super.doDelete(eleve);
		return r > 0 ;
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public boolean delete( EleveRecord eleve ) {
		int r = super.doDelete(eleve);
		return r > 0 ;
	}

    //----------------------------------------------------------------------
	/**
	 * Checks the existence of a record in the database using the given primary key value(s)
	 * @param idEleve;
	 * @return
	 */
	// @Override
	public boolean exists( Integer idEleve ) {
		EleveRecord eleve = newInstanceWithPrimaryKey( idEleve ) ;
		return super.doExists(eleve);
	}
    //----------------------------------------------------------------------
	/**
	 * Checks the existence of the given bean in the database 
	 * @param eleve
	 * @return
	 */
	// @Override
	public boolean exists( EleveRecord eleve ) {
		return super.doExists(eleve);
	}

    //----------------------------------------------------------------------
	/**
	 * Counts all the records present in the database
	 * @return
	 */
	@Override
	public long countAll() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelectAll() {
		return SQL_SELECT_ALL;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}

}
