/*
 * Created on 2017-02-28 ( Date ISO 2017-02-28 - Time 17:44:24 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */
package org.demo.persistence.impl.fake;

import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.inject.Named;


import org.demo.data.record.CoursRecord;
import org.demo.persistence.CoursPersistence;

@Named("CoursPersistence")
public class CoursPersistenceImplFake implements CoursPersistence {

	private final static Map<String,CoursRecord> map = new Hashtable<String,CoursRecord>() ;

	private void checkNotNull(Object o) {
		if ( o == null ) {
			throw new IllegalArgumentException("Key element is null");
		}
	}

	/**
	 * Build the String key from this entity
     * @param idCours 
	 * @return the key
	 */
	private final String getKey( Integer idCours ) {
		checkNotNull(idCours);
		return ""  + idCours + "|"  ;
	}

	@Override
	public CoursRecord findById(Integer idCours) {
		String key = getKey( idCours );
		return map.get(key);
	}

	@Override
	public List<CoursRecord> findAll() {
		List<CoursRecord> list = new LinkedList<CoursRecord>();
		for ( CoursRecord entity : map.values() ) {
			list.add(entity);
		}
		return list;
	}

	@Override
	public long countAll() {
		return map.size() ;
	}

	@Override
	public CoursRecord save(CoursRecord entity) {
		String key = getKey( entity.getIdCours() );
		map.put(key, entity );
		return entity;
	}

	@Override
	public boolean update(CoursRecord entity) {
		String key = getKey( entity.getIdCours() );
		if ( map.get(key) == null ) {
			// Doesn't Exist => no update
			return false ;
		}
		else {
			// Exists => update
			map.put(key, entity );
			return true ;
		}
	}

	@Override
	public CoursRecord create(CoursRecord entity) {
		String key = getKey( entity.getIdCours() );
		if ( map.get(key) == null ) {
			map.put(key, entity );
			return entity ;
		}
		else {
			throw new RuntimeException("CoursRecord - Duplicate key : " + key );
		}
	}

	@Override
	public boolean deleteById(Integer idCours) {
		String key = getKey(idCours);
		CoursRecord deleted = map.remove(key);
		return deleted != null ;
	}

	@Override
	public boolean delete(CoursRecord entity) {
		String key = getKey( entity.getIdCours() );
		CoursRecord deleted = map.remove(key);
		return deleted != null ;
	}

	@Override
	public boolean exists(Integer idCours) {
		return findById(idCours) != null ;
	}

	@Override
	public boolean exists(CoursRecord entity) {
		return findById( entity.getIdCours() ) != null ;
	}

}
